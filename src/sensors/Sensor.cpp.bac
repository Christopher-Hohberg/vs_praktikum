/*
 * Sensor.cpp
 *
 *  Created on: May 2, 2022
 *      Author: fbellmann
 */
#define _GNU_SOURCE     /* To get defns of NI_MAXSERV and NI_MAXHOST */
#include <iostream>
#include <unistd.h>
#include <string>
#include <thread>
#include <time.h>
#include <random>
#include <iomanip>
#include <vector>
#include <mutex>
#include <cstdlib>
#include <boost/bind.hpp>
#include <boost/asio.hpp>
#include <chrono>
#include <semaphore.h>

// get ip address dependencies:
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ifaddrs.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <linux/if_link.h>

using boost::asio::ip::udp;
using std::string;
using std::cout;
using std::cerr;
using std::runtime_error;
using std::exception;
using std::thread;
using std::setprecision;
using std::vector;
using std::mutex;
using std::atoi;
using namespace std::chrono;
using std::stoi;
using std::stol;
using std::to_string;
using std::system_error;

struct SensorDescription {
	//int ID = {};
	string ip = {};
	int port = {};
};

struct SensorData {
	double temperature = {};
	double brightness = {};
	double humidity = {};
};

struct GatewayUDPRequest {
	long int id = {};
	string host = {};
	int port = {};
	long int timestamp = {};
};

SensorDescription* sensorDescription = new SensorDescription{};
/* holds all of the sensor data which was generated in the past.
 * from here the gateway gets it's values. if a udp request comes in,
 * then the first entry of the vector is returned. if there is none, then
 * the value was already returned to the gateway or there is no data generated.
 */
vector<SensorData*>* historicSensorData = new vector<SensorData*>{};
mutex* mtxHistoricSensorData = new mutex();
//sem_t* freeSpacesLeftInHistoricSensorData =  new sem_t*{};
//int AMOUNT_OF_FREE_SPACES_IN_HISTORIC_SENSOR_DATA = 50;

constexpr double MIN_TEMP_VALUE = 0.0;
constexpr double MAX_TEMP_VALUE = 25.0;
constexpr double MIN_BRIGHT_VALUE = 0.0;
constexpr double MAX_BRIGHT_VALUE = 100.0;
constexpr double MIN_HUM_VALUE = 30.0;
constexpr double MAX_HUM_VALUE = 80.0;
const int GENERATION_TIME = 1000000;

GatewayUDPRequest parseRequest(char* data_);
void generateSensorData();
string generateReply(long int replyID);
string convertToTwoDecimalPlaces(string number);
string getIPAdress();
string getRealIPAddress(string possibleIPAddresses);

class server {
public:
	server(boost::asio::io_service& io_service, short port)
    : // io_service_(io_service),
    socket_(io_service, udp::endpoint(udp::v4(), port)) {
		socket_.async_receive_from(
			boost::asio::buffer(data_, max_length), sender_endpoint_,
			boost::bind(&server::handle_receive_from, this,
			  boost::asio::placeholders::error,
			  boost::asio::placeholders::bytes_transferred));
	}

	void handle_receive_from(const boost::system::error_code& error, size_t bytes_recvd) {
		if (!error && bytes_recvd > 0) {
			GatewayUDPRequest curReq = parseRequest(data_);
			cout << "Request is: " << data_ << "\n";
			string reply = generateReply(curReq.id);

			char replyChar[max_length];
			strcpy(replyChar, reply.c_str());
			size_t reply_length = strlen(replyChar);
			socket_.async_send_to(
				boost::asio::buffer(replyChar, reply_length), sender_endpoint_, // muss replyChar wirklich ein char array sein?
				boost::bind(&server::handle_send_to, this,
				boost::asio::placeholders::error,
				boost::asio::placeholders::bytes_transferred));
		} else {
			socket_.async_receive_from(
			    boost::asio::buffer(data_, max_length), sender_endpoint_,
			    boost::bind(&server::handle_receive_from, this,
				boost::asio::placeholders::error,
				boost::asio::placeholders::bytes_transferred));
		}
	}

	void handle_send_to(const boost::system::error_code& /*error*/, size_t /*bytes_sent*/) {
		socket_.async_receive_from(
			boost::asio::buffer(data_, max_length), sender_endpoint_,
			boost::bind(&server::handle_receive_from, this,
			boost::asio::placeholders::error,
			boost::asio::placeholders::bytes_transferred));
	}

private:
	// boost::asio::io_service& io_service_;
	udp::socket socket_;
	udp::endpoint sender_endpoint_;
	enum { max_length = 4096 };
	char data_[max_length];
};

int main(int argc, char* argv[]) try {
	cout << "begin\n";

	string ip = getIPAdress();
	cout << "I've got ip address " + ip + "\n";

	// read in port
	try {
		/*if (argc != 2) {
		  std::cerr << "Usage: async_udp_sensor_server <port>\n";
		  return 1;
		}
		cout << "port hat gefruchtet\n";*/
		// init semaphore for historic sensor data
		//sem_init(freeSpacesLeftInHistoricSensorData, 0, AMOUNT_OF_FREE_SPACES_IN_HISTORIC_SENSOR_DATA);

		// generating sensor data
		thread sensorData(generateSensorData);
		sensorData.detach();

		cout << "nach sensor kreierung\n";
		// save configuration to SensorDescription
		sensorDescription->ip = ip;
		sensorDescription->port = 11000;

		boost::asio::io_service io_service;

		server s(io_service, atoi(argv[1]));
		cout << "nach server kreierung\n";

		io_service.run();
	}
	catch (std::exception& e) {
		std::cerr << "Exception: " << e.what() << "\n";
	}

	return 0;
}
catch ( system_error& s ) {
    cerr << "\nerror -4: " << "\n";
    return -4;
}
catch ( runtime_error& r ) {
    cerr << "\nerror -3: " << r.what() << "\n";
    return -3;
}
catch ( exception& e ) {
    cerr << "\nerror -2: " << e.what() << "\n";
    return -2;
}
catch ( ... ) {
    cerr << "\nan error -1"  << "\n";
    return -1;
}

string getIPAdress() {
    struct ifaddrs *ifaddr;
    int family, s;
    char host[NI_MAXHOST];

    if (getifaddrs(&ifaddr) == -1) {
        perror("getifaddrs");
        exit(EXIT_FAILURE);
    }

    /* Walk through linked list, maintaining head pointer so we
       can free list later. */

    for (struct ifaddrs *ifa = ifaddr; ifa != NULL;
             ifa = ifa->ifa_next) {
        if (ifa->ifa_addr == NULL)
            continue;

        family = ifa->ifa_addr->sa_family;

        /* Display interface name and family (including symbolic
           form of the latter for the common families). */

        /* For an AF_INET* interface address, display the address. */

        if (family == AF_INET || family == AF_INET6) {
            s = getnameinfo(ifa->ifa_addr,
                    (family == AF_INET) ? sizeof(struct sockaddr_in) :
                                          sizeof(struct sockaddr_in6),
                    host, NI_MAXHOST,
                    NULL, 0, NI_NUMERICHOST);
            if (s != 0) {
                printf("getnameinfo() failed: %s\n", gai_strerror(s));
                exit(EXIT_FAILURE);
            }

            string stringHost(host);
            if (stringHost.find("10.5.0.") != std::string::npos) { // check if the current ip address contains a substring of the ip address we are looking for
            	// the sensor has one of the ip addresses that are included in the possibleIPAdresses string
            	if (stringHost != "10.5.0.1") {
            		freeifaddrs(ifaddr);
            		return stringHost;
            	}
            }
        }
    }
    freeifaddrs(ifaddr);
    cerr << "Error: Could not find the right ip address\n";
    exit(EXIT_FAILURE);
}

void generateSensorData() {
	// initialize random values generator for each of the sensor data attributes
    std::random_device rd;
    std::default_random_engine eng(rd());
    std::uniform_real_distribution<double> tempGenerator(MIN_TEMP_VALUE, MAX_TEMP_VALUE);
    std::uniform_real_distribution<double> brightGenerator(MIN_BRIGHT_VALUE, MAX_BRIGHT_VALUE);
    std::uniform_real_distribution<double> humGenerator(MIN_HUM_VALUE, MAX_HUM_VALUE);
    while (true) {
		usleep(GENERATION_TIME); // how long it will take till the values change
		/* holds the current sensor data which will be then stored into the
		 * historicSensorData array
		 */
		SensorData* sensorData = new SensorData{};
		//sem_wait(freeSpacesLeftInHistoricSensorData);
		setprecision(2);
		sensorData->brightness = brightGenerator(eng);
		sensorData->temperature = tempGenerator(eng);
		sensorData->humidity = humGenerator(eng);
		mtxHistoricSensorData->lock();
			cout << "current vector size: " << historicSensorData->size() << "\n";
			if (historicSensorData->size() >= 50) {
				historicSensorData->erase(historicSensorData->begin());
			}
			historicSensorData->push_back(sensorData);
		mtxHistoricSensorData->unlock();
		cout << "new generated values:\n";
		cout << "bright: " << sensorData->brightness << " ";
		cout << "hum: " << sensorData->humidity << " ";
		cout << "temp: " << sensorData->temperature << " ";
		cout << "\n";
    }
}

GatewayUDPRequest parseRequest(char* data_) {
	GatewayUDPRequest parsedRequest = {};
	string request = std::string(data_);

	size_t last = 0;
	size_t next = 0;
	string delimiter = ";";
	int index = {};
	while ((next = request.find(delimiter, last)) != string::npos) {
		switch(index) {
			case 0: parsedRequest.id = stol(request.substr(last, next-last));
					break;
			case 1: parsedRequest.host = request.substr(last, next-last);
					break;
			case 2: parsedRequest.port = stoi(request.substr(last, next-last));
					break;
			case 3: parsedRequest.timestamp = stol(request.substr(last, next-last));
					break;
		}
		++index;
		last = next + 1;
	}
	return parsedRequest;
}

string generateReply(long int replyID) {
	milliseconds timestamp = duration_cast< milliseconds >(system_clock::now().time_since_epoch());

	string reply = {};
	mtxHistoricSensorData->lock();
		if (historicSensorData->size() >= 1) {
			SensorData* sensorData = historicSensorData->at(0);
			reply = to_string(replyID) + ";" +
					to_string(timestamp.count()) + ";" +
					convertToTwoDecimalPlaces(to_string(sensorData->brightness)) + ";" +
					convertToTwoDecimalPlaces(to_string(sensorData->humidity)) + ";" +
					convertToTwoDecimalPlaces(to_string(sensorData->temperature)) +
					";0;" +
					sensorDescription->ip + ";" +
					to_string(sensorDescription->port) + ";" +
					"NULL";
			historicSensorData->erase(historicSensorData->begin());
		} else {
			reply = to_string(replyID) + ";" +
					to_string(timestamp.count()) +";" +
					"0.0" + ";"
					+ "0.0" + ";" +
					"0.0" +
					";-1;" +
					sensorDescription->ip + ";" +
					to_string(sensorDescription->port) + ";" +
					"NULL";
		}
	mtxHistoricSensorData->unlock();

	return reply;
}

string convertToTwoDecimalPlaces(string number) {
	string delimiter = ".";
	number = number.substr(0, number.find(delimiter) + 1) + number.substr(number.find(delimiter) + 1, 2);
	return number;
}
