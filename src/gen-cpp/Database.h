/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Database_H
#define Database_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "database_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DatabaseIf {
 public:
  virtual ~DatabaseIf() {}
  virtual void ping() = 0;
  virtual int32_t updateSensorMetadata(const std::string& id, const SensorMetadata& sensorMetadata) = 0;
  virtual int32_t deleteSensorMetadata(const std::string& id) = 0;
  virtual void readSensorMetadata(SensorMetadata& _return, const std::string& id) = 0;
  virtual int32_t createSensorMetadata(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) = 0;
  virtual void readAll(std::map<std::string, SensorMetadata> & _return, const int32_t numberOfRows) = 0;
  virtual int32_t isUpdatePossible(const std::string& id) = 0;
  virtual int32_t isDeletePossible(const std::string& id) = 0;
  virtual int32_t isCreatePossible(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) = 0;
};

class DatabaseIfFactory {
 public:
  typedef DatabaseIf Handler;

  virtual ~DatabaseIfFactory() {}

  virtual DatabaseIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatabaseIf* /* handler */) = 0;
  };

class DatabaseIfSingletonFactory : virtual public DatabaseIfFactory {
 public:
  DatabaseIfSingletonFactory(const ::std::shared_ptr<DatabaseIf>& iface) : iface_(iface) {}
  virtual ~DatabaseIfSingletonFactory() {}

  virtual DatabaseIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(DatabaseIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<DatabaseIf> iface_;
};

class DatabaseNull : virtual public DatabaseIf {
 public:
  virtual ~DatabaseNull() {}
  void ping() override {
    return;
  }
  int32_t updateSensorMetadata(const std::string& /* id */, const SensorMetadata& /* sensorMetadata */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t deleteSensorMetadata(const std::string& /* id */) override {
    int32_t _return = 0;
    return _return;
  }
  void readSensorMetadata(SensorMetadata& /* _return */, const std::string& /* id */) override {
    return;
  }
  int32_t createSensorMetadata(const std::map<std::string, SensorMetadata> & /* sensorMetadataCollection */) override {
    int32_t _return = 0;
    return _return;
  }
  void readAll(std::map<std::string, SensorMetadata> & /* _return */, const int32_t /* numberOfRows */) override {
    return;
  }
  int32_t isUpdatePossible(const std::string& /* id */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t isDeletePossible(const std::string& /* id */) override {
    int32_t _return = 0;
    return _return;
  }
  int32_t isCreatePossible(const std::map<std::string, SensorMetadata> & /* sensorMetadataCollection */) override {
    int32_t _return = 0;
    return _return;
  }
};


class Database_ping_args {
 public:

  Database_ping_args(const Database_ping_args&) noexcept;
  Database_ping_args& operator=(const Database_ping_args&) noexcept;
  Database_ping_args() noexcept {
  }

  virtual ~Database_ping_args() noexcept;

  bool operator == (const Database_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_ping_pargs {
 public:


  virtual ~Database_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_ping_result {
 public:

  Database_ping_result(const Database_ping_result&) noexcept;
  Database_ping_result& operator=(const Database_ping_result&) noexcept;
  Database_ping_result() noexcept {
  }

  virtual ~Database_ping_result() noexcept;

  bool operator == (const Database_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Database_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_ping_presult {
 public:


  virtual ~Database_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_updateSensorMetadata_args__isset {
  _Database_updateSensorMetadata_args__isset() : id(false), sensorMetadata(false) {}
  bool id :1;
  bool sensorMetadata :1;
} _Database_updateSensorMetadata_args__isset;

class Database_updateSensorMetadata_args {
 public:

  Database_updateSensorMetadata_args(const Database_updateSensorMetadata_args&);
  Database_updateSensorMetadata_args& operator=(const Database_updateSensorMetadata_args&);
  Database_updateSensorMetadata_args() noexcept
                                     : id() {
  }

  virtual ~Database_updateSensorMetadata_args() noexcept;
  std::string id;
  SensorMetadata sensorMetadata;

  _Database_updateSensorMetadata_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_sensorMetadata(const SensorMetadata& val);

  bool operator == (const Database_updateSensorMetadata_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(sensorMetadata == rhs.sensorMetadata))
      return false;
    return true;
  }
  bool operator != (const Database_updateSensorMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_updateSensorMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_updateSensorMetadata_pargs {
 public:


  virtual ~Database_updateSensorMetadata_pargs() noexcept;
  const std::string* id;
  const SensorMetadata* sensorMetadata;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_updateSensorMetadata_result__isset {
  _Database_updateSensorMetadata_result__isset() : success(false) {}
  bool success :1;
} _Database_updateSensorMetadata_result__isset;

class Database_updateSensorMetadata_result {
 public:

  Database_updateSensorMetadata_result(const Database_updateSensorMetadata_result&) noexcept;
  Database_updateSensorMetadata_result& operator=(const Database_updateSensorMetadata_result&) noexcept;
  Database_updateSensorMetadata_result() noexcept
                                       : success(0) {
  }

  virtual ~Database_updateSensorMetadata_result() noexcept;
  int32_t success;

  _Database_updateSensorMetadata_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Database_updateSensorMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_updateSensorMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_updateSensorMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_updateSensorMetadata_presult__isset {
  _Database_updateSensorMetadata_presult__isset() : success(false) {}
  bool success :1;
} _Database_updateSensorMetadata_presult__isset;

class Database_updateSensorMetadata_presult {
 public:


  virtual ~Database_updateSensorMetadata_presult() noexcept;
  int32_t* success;

  _Database_updateSensorMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_deleteSensorMetadata_args__isset {
  _Database_deleteSensorMetadata_args__isset() : id(false) {}
  bool id :1;
} _Database_deleteSensorMetadata_args__isset;

class Database_deleteSensorMetadata_args {
 public:

  Database_deleteSensorMetadata_args(const Database_deleteSensorMetadata_args&);
  Database_deleteSensorMetadata_args& operator=(const Database_deleteSensorMetadata_args&);
  Database_deleteSensorMetadata_args() noexcept
                                     : id() {
  }

  virtual ~Database_deleteSensorMetadata_args() noexcept;
  std::string id;

  _Database_deleteSensorMetadata_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const Database_deleteSensorMetadata_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Database_deleteSensorMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_deleteSensorMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_deleteSensorMetadata_pargs {
 public:


  virtual ~Database_deleteSensorMetadata_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_deleteSensorMetadata_result__isset {
  _Database_deleteSensorMetadata_result__isset() : success(false) {}
  bool success :1;
} _Database_deleteSensorMetadata_result__isset;

class Database_deleteSensorMetadata_result {
 public:

  Database_deleteSensorMetadata_result(const Database_deleteSensorMetadata_result&) noexcept;
  Database_deleteSensorMetadata_result& operator=(const Database_deleteSensorMetadata_result&) noexcept;
  Database_deleteSensorMetadata_result() noexcept
                                       : success(0) {
  }

  virtual ~Database_deleteSensorMetadata_result() noexcept;
  int32_t success;

  _Database_deleteSensorMetadata_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Database_deleteSensorMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_deleteSensorMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_deleteSensorMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_deleteSensorMetadata_presult__isset {
  _Database_deleteSensorMetadata_presult__isset() : success(false) {}
  bool success :1;
} _Database_deleteSensorMetadata_presult__isset;

class Database_deleteSensorMetadata_presult {
 public:


  virtual ~Database_deleteSensorMetadata_presult() noexcept;
  int32_t* success;

  _Database_deleteSensorMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_readSensorMetadata_args__isset {
  _Database_readSensorMetadata_args__isset() : id(false) {}
  bool id :1;
} _Database_readSensorMetadata_args__isset;

class Database_readSensorMetadata_args {
 public:

  Database_readSensorMetadata_args(const Database_readSensorMetadata_args&);
  Database_readSensorMetadata_args& operator=(const Database_readSensorMetadata_args&);
  Database_readSensorMetadata_args() noexcept
                                   : id() {
  }

  virtual ~Database_readSensorMetadata_args() noexcept;
  std::string id;

  _Database_readSensorMetadata_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const Database_readSensorMetadata_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Database_readSensorMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_readSensorMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_readSensorMetadata_pargs {
 public:


  virtual ~Database_readSensorMetadata_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_readSensorMetadata_result__isset {
  _Database_readSensorMetadata_result__isset() : success(false) {}
  bool success :1;
} _Database_readSensorMetadata_result__isset;

class Database_readSensorMetadata_result {
 public:

  Database_readSensorMetadata_result(const Database_readSensorMetadata_result&);
  Database_readSensorMetadata_result& operator=(const Database_readSensorMetadata_result&);
  Database_readSensorMetadata_result() noexcept {
  }

  virtual ~Database_readSensorMetadata_result() noexcept;
  SensorMetadata success;

  _Database_readSensorMetadata_result__isset __isset;

  void __set_success(const SensorMetadata& val);

  bool operator == (const Database_readSensorMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_readSensorMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_readSensorMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_readSensorMetadata_presult__isset {
  _Database_readSensorMetadata_presult__isset() : success(false) {}
  bool success :1;
} _Database_readSensorMetadata_presult__isset;

class Database_readSensorMetadata_presult {
 public:


  virtual ~Database_readSensorMetadata_presult() noexcept;
  SensorMetadata* success;

  _Database_readSensorMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_createSensorMetadata_args__isset {
  _Database_createSensorMetadata_args__isset() : sensorMetadataCollection(false) {}
  bool sensorMetadataCollection :1;
} _Database_createSensorMetadata_args__isset;

class Database_createSensorMetadata_args {
 public:

  Database_createSensorMetadata_args(const Database_createSensorMetadata_args&);
  Database_createSensorMetadata_args& operator=(const Database_createSensorMetadata_args&);
  Database_createSensorMetadata_args() noexcept {
  }

  virtual ~Database_createSensorMetadata_args() noexcept;
  std::map<std::string, SensorMetadata>  sensorMetadataCollection;

  _Database_createSensorMetadata_args__isset __isset;

  void __set_sensorMetadataCollection(const std::map<std::string, SensorMetadata> & val);

  bool operator == (const Database_createSensorMetadata_args & rhs) const
  {
    if (!(sensorMetadataCollection == rhs.sensorMetadataCollection))
      return false;
    return true;
  }
  bool operator != (const Database_createSensorMetadata_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_createSensorMetadata_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_createSensorMetadata_pargs {
 public:


  virtual ~Database_createSensorMetadata_pargs() noexcept;
  const std::map<std::string, SensorMetadata> * sensorMetadataCollection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_createSensorMetadata_result__isset {
  _Database_createSensorMetadata_result__isset() : success(false) {}
  bool success :1;
} _Database_createSensorMetadata_result__isset;

class Database_createSensorMetadata_result {
 public:

  Database_createSensorMetadata_result(const Database_createSensorMetadata_result&) noexcept;
  Database_createSensorMetadata_result& operator=(const Database_createSensorMetadata_result&) noexcept;
  Database_createSensorMetadata_result() noexcept
                                       : success(0) {
  }

  virtual ~Database_createSensorMetadata_result() noexcept;
  int32_t success;

  _Database_createSensorMetadata_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Database_createSensorMetadata_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_createSensorMetadata_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_createSensorMetadata_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_createSensorMetadata_presult__isset {
  _Database_createSensorMetadata_presult__isset() : success(false) {}
  bool success :1;
} _Database_createSensorMetadata_presult__isset;

class Database_createSensorMetadata_presult {
 public:


  virtual ~Database_createSensorMetadata_presult() noexcept;
  int32_t* success;

  _Database_createSensorMetadata_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_readAll_args__isset {
  _Database_readAll_args__isset() : numberOfRows(false) {}
  bool numberOfRows :1;
} _Database_readAll_args__isset;

class Database_readAll_args {
 public:

  Database_readAll_args(const Database_readAll_args&) noexcept;
  Database_readAll_args& operator=(const Database_readAll_args&) noexcept;
  Database_readAll_args() noexcept
                        : numberOfRows(0) {
  }

  virtual ~Database_readAll_args() noexcept;
  int32_t numberOfRows;

  _Database_readAll_args__isset __isset;

  void __set_numberOfRows(const int32_t val);

  bool operator == (const Database_readAll_args & rhs) const
  {
    if (!(numberOfRows == rhs.numberOfRows))
      return false;
    return true;
  }
  bool operator != (const Database_readAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_readAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_readAll_pargs {
 public:


  virtual ~Database_readAll_pargs() noexcept;
  const int32_t* numberOfRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_readAll_result__isset {
  _Database_readAll_result__isset() : success(false) {}
  bool success :1;
} _Database_readAll_result__isset;

class Database_readAll_result {
 public:

  Database_readAll_result(const Database_readAll_result&);
  Database_readAll_result& operator=(const Database_readAll_result&);
  Database_readAll_result() noexcept {
  }

  virtual ~Database_readAll_result() noexcept;
  std::map<std::string, SensorMetadata>  success;

  _Database_readAll_result__isset __isset;

  void __set_success(const std::map<std::string, SensorMetadata> & val);

  bool operator == (const Database_readAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_readAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_readAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_readAll_presult__isset {
  _Database_readAll_presult__isset() : success(false) {}
  bool success :1;
} _Database_readAll_presult__isset;

class Database_readAll_presult {
 public:


  virtual ~Database_readAll_presult() noexcept;
  std::map<std::string, SensorMetadata> * success;

  _Database_readAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_isUpdatePossible_args__isset {
  _Database_isUpdatePossible_args__isset() : id(false) {}
  bool id :1;
} _Database_isUpdatePossible_args__isset;

class Database_isUpdatePossible_args {
 public:

  Database_isUpdatePossible_args(const Database_isUpdatePossible_args&);
  Database_isUpdatePossible_args& operator=(const Database_isUpdatePossible_args&);
  Database_isUpdatePossible_args() noexcept
                                 : id() {
  }

  virtual ~Database_isUpdatePossible_args() noexcept;
  std::string id;

  _Database_isUpdatePossible_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const Database_isUpdatePossible_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Database_isUpdatePossible_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_isUpdatePossible_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_isUpdatePossible_pargs {
 public:


  virtual ~Database_isUpdatePossible_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_isUpdatePossible_result__isset {
  _Database_isUpdatePossible_result__isset() : success(false) {}
  bool success :1;
} _Database_isUpdatePossible_result__isset;

class Database_isUpdatePossible_result {
 public:

  Database_isUpdatePossible_result(const Database_isUpdatePossible_result&) noexcept;
  Database_isUpdatePossible_result& operator=(const Database_isUpdatePossible_result&) noexcept;
  Database_isUpdatePossible_result() noexcept
                                   : success(0) {
  }

  virtual ~Database_isUpdatePossible_result() noexcept;
  int32_t success;

  _Database_isUpdatePossible_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Database_isUpdatePossible_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_isUpdatePossible_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_isUpdatePossible_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_isUpdatePossible_presult__isset {
  _Database_isUpdatePossible_presult__isset() : success(false) {}
  bool success :1;
} _Database_isUpdatePossible_presult__isset;

class Database_isUpdatePossible_presult {
 public:


  virtual ~Database_isUpdatePossible_presult() noexcept;
  int32_t* success;

  _Database_isUpdatePossible_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_isDeletePossible_args__isset {
  _Database_isDeletePossible_args__isset() : id(false) {}
  bool id :1;
} _Database_isDeletePossible_args__isset;

class Database_isDeletePossible_args {
 public:

  Database_isDeletePossible_args(const Database_isDeletePossible_args&);
  Database_isDeletePossible_args& operator=(const Database_isDeletePossible_args&);
  Database_isDeletePossible_args() noexcept
                                 : id() {
  }

  virtual ~Database_isDeletePossible_args() noexcept;
  std::string id;

  _Database_isDeletePossible_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const Database_isDeletePossible_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Database_isDeletePossible_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_isDeletePossible_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_isDeletePossible_pargs {
 public:


  virtual ~Database_isDeletePossible_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_isDeletePossible_result__isset {
  _Database_isDeletePossible_result__isset() : success(false) {}
  bool success :1;
} _Database_isDeletePossible_result__isset;

class Database_isDeletePossible_result {
 public:

  Database_isDeletePossible_result(const Database_isDeletePossible_result&) noexcept;
  Database_isDeletePossible_result& operator=(const Database_isDeletePossible_result&) noexcept;
  Database_isDeletePossible_result() noexcept
                                   : success(0) {
  }

  virtual ~Database_isDeletePossible_result() noexcept;
  int32_t success;

  _Database_isDeletePossible_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Database_isDeletePossible_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_isDeletePossible_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_isDeletePossible_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_isDeletePossible_presult__isset {
  _Database_isDeletePossible_presult__isset() : success(false) {}
  bool success :1;
} _Database_isDeletePossible_presult__isset;

class Database_isDeletePossible_presult {
 public:


  virtual ~Database_isDeletePossible_presult() noexcept;
  int32_t* success;

  _Database_isDeletePossible_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Database_isCreatePossible_args__isset {
  _Database_isCreatePossible_args__isset() : sensorMetadataCollection(false) {}
  bool sensorMetadataCollection :1;
} _Database_isCreatePossible_args__isset;

class Database_isCreatePossible_args {
 public:

  Database_isCreatePossible_args(const Database_isCreatePossible_args&);
  Database_isCreatePossible_args& operator=(const Database_isCreatePossible_args&);
  Database_isCreatePossible_args() noexcept {
  }

  virtual ~Database_isCreatePossible_args() noexcept;
  std::map<std::string, SensorMetadata>  sensorMetadataCollection;

  _Database_isCreatePossible_args__isset __isset;

  void __set_sensorMetadataCollection(const std::map<std::string, SensorMetadata> & val);

  bool operator == (const Database_isCreatePossible_args & rhs) const
  {
    if (!(sensorMetadataCollection == rhs.sensorMetadataCollection))
      return false;
    return true;
  }
  bool operator != (const Database_isCreatePossible_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_isCreatePossible_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Database_isCreatePossible_pargs {
 public:


  virtual ~Database_isCreatePossible_pargs() noexcept;
  const std::map<std::string, SensorMetadata> * sensorMetadataCollection;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_isCreatePossible_result__isset {
  _Database_isCreatePossible_result__isset() : success(false) {}
  bool success :1;
} _Database_isCreatePossible_result__isset;

class Database_isCreatePossible_result {
 public:

  Database_isCreatePossible_result(const Database_isCreatePossible_result&) noexcept;
  Database_isCreatePossible_result& operator=(const Database_isCreatePossible_result&) noexcept;
  Database_isCreatePossible_result() noexcept
                                   : success(0) {
  }

  virtual ~Database_isCreatePossible_result() noexcept;
  int32_t success;

  _Database_isCreatePossible_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Database_isCreatePossible_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Database_isCreatePossible_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Database_isCreatePossible_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Database_isCreatePossible_presult__isset {
  _Database_isCreatePossible_presult__isset() : success(false) {}
  bool success :1;
} _Database_isCreatePossible_presult__isset;

class Database_isCreatePossible_presult {
 public:


  virtual ~Database_isCreatePossible_presult() noexcept;
  int32_t* success;

  _Database_isCreatePossible_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatabaseClient : virtual public DatabaseIf {
 public:
  DatabaseClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DatabaseClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  void send_ping();
  void recv_ping();
  int32_t updateSensorMetadata(const std::string& id, const SensorMetadata& sensorMetadata) override;
  void send_updateSensorMetadata(const std::string& id, const SensorMetadata& sensorMetadata);
  int32_t recv_updateSensorMetadata();
  int32_t deleteSensorMetadata(const std::string& id) override;
  void send_deleteSensorMetadata(const std::string& id);
  int32_t recv_deleteSensorMetadata();
  void readSensorMetadata(SensorMetadata& _return, const std::string& id) override;
  void send_readSensorMetadata(const std::string& id);
  void recv_readSensorMetadata(SensorMetadata& _return);
  int32_t createSensorMetadata(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) override;
  void send_createSensorMetadata(const std::map<std::string, SensorMetadata> & sensorMetadataCollection);
  int32_t recv_createSensorMetadata();
  void readAll(std::map<std::string, SensorMetadata> & _return, const int32_t numberOfRows) override;
  void send_readAll(const int32_t numberOfRows);
  void recv_readAll(std::map<std::string, SensorMetadata> & _return);
  int32_t isUpdatePossible(const std::string& id) override;
  void send_isUpdatePossible(const std::string& id);
  int32_t recv_isUpdatePossible();
  int32_t isDeletePossible(const std::string& id) override;
  void send_isDeletePossible(const std::string& id);
  int32_t recv_isDeletePossible();
  int32_t isCreatePossible(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) override;
  void send_isCreatePossible(const std::map<std::string, SensorMetadata> & sensorMetadataCollection);
  int32_t recv_isCreatePossible();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatabaseProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DatabaseIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (DatabaseProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSensorMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSensorMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readSensorMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createSensorMetadata(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isUpdatePossible(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isDeletePossible(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isCreatePossible(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatabaseProcessor(::std::shared_ptr<DatabaseIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DatabaseProcessor::process_ping;
    processMap_["updateSensorMetadata"] = &DatabaseProcessor::process_updateSensorMetadata;
    processMap_["deleteSensorMetadata"] = &DatabaseProcessor::process_deleteSensorMetadata;
    processMap_["readSensorMetadata"] = &DatabaseProcessor::process_readSensorMetadata;
    processMap_["createSensorMetadata"] = &DatabaseProcessor::process_createSensorMetadata;
    processMap_["readAll"] = &DatabaseProcessor::process_readAll;
    processMap_["isUpdatePossible"] = &DatabaseProcessor::process_isUpdatePossible;
    processMap_["isDeletePossible"] = &DatabaseProcessor::process_isDeletePossible;
    processMap_["isCreatePossible"] = &DatabaseProcessor::process_isCreatePossible;
  }

  virtual ~DatabaseProcessor() {}
};

class DatabaseProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatabaseProcessorFactory(const ::std::shared_ptr< DatabaseIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< DatabaseIfFactory > handlerFactory_;
};

class DatabaseMultiface : virtual public DatabaseIf {
 public:
  DatabaseMultiface(std::vector<std::shared_ptr<DatabaseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatabaseMultiface() {}
 protected:
  std::vector<std::shared_ptr<DatabaseIf> > ifaces_;
  DatabaseMultiface() {}
  void add(::std::shared_ptr<DatabaseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int32_t updateSensorMetadata(const std::string& id, const SensorMetadata& sensorMetadata) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSensorMetadata(id, sensorMetadata);
    }
    return ifaces_[i]->updateSensorMetadata(id, sensorMetadata);
  }

  int32_t deleteSensorMetadata(const std::string& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSensorMetadata(id);
    }
    return ifaces_[i]->deleteSensorMetadata(id);
  }

  void readSensorMetadata(SensorMetadata& _return, const std::string& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readSensorMetadata(_return, id);
    }
    ifaces_[i]->readSensorMetadata(_return, id);
    return;
  }

  int32_t createSensorMetadata(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createSensorMetadata(sensorMetadataCollection);
    }
    return ifaces_[i]->createSensorMetadata(sensorMetadataCollection);
  }

  void readAll(std::map<std::string, SensorMetadata> & _return, const int32_t numberOfRows) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readAll(_return, numberOfRows);
    }
    ifaces_[i]->readAll(_return, numberOfRows);
    return;
  }

  int32_t isUpdatePossible(const std::string& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isUpdatePossible(id);
    }
    return ifaces_[i]->isUpdatePossible(id);
  }

  int32_t isDeletePossible(const std::string& id) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isDeletePossible(id);
    }
    return ifaces_[i]->isDeletePossible(id);
  }

  int32_t isCreatePossible(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isCreatePossible(sensorMetadataCollection);
    }
    return ifaces_[i]->isCreatePossible(sensorMetadataCollection);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DatabaseConcurrentClient : virtual public DatabaseIf {
 public:
  DatabaseConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DatabaseConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping() override;
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int32_t updateSensorMetadata(const std::string& id, const SensorMetadata& sensorMetadata) override;
  int32_t send_updateSensorMetadata(const std::string& id, const SensorMetadata& sensorMetadata);
  int32_t recv_updateSensorMetadata(const int32_t seqid);
  int32_t deleteSensorMetadata(const std::string& id) override;
  int32_t send_deleteSensorMetadata(const std::string& id);
  int32_t recv_deleteSensorMetadata(const int32_t seqid);
  void readSensorMetadata(SensorMetadata& _return, const std::string& id) override;
  int32_t send_readSensorMetadata(const std::string& id);
  void recv_readSensorMetadata(SensorMetadata& _return, const int32_t seqid);
  int32_t createSensorMetadata(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) override;
  int32_t send_createSensorMetadata(const std::map<std::string, SensorMetadata> & sensorMetadataCollection);
  int32_t recv_createSensorMetadata(const int32_t seqid);
  void readAll(std::map<std::string, SensorMetadata> & _return, const int32_t numberOfRows) override;
  int32_t send_readAll(const int32_t numberOfRows);
  void recv_readAll(std::map<std::string, SensorMetadata> & _return, const int32_t seqid);
  int32_t isUpdatePossible(const std::string& id) override;
  int32_t send_isUpdatePossible(const std::string& id);
  int32_t recv_isUpdatePossible(const int32_t seqid);
  int32_t isDeletePossible(const std::string& id) override;
  int32_t send_isDeletePossible(const std::string& id);
  int32_t recv_isDeletePossible(const int32_t seqid);
  int32_t isCreatePossible(const std::map<std::string, SensorMetadata> & sensorMetadataCollection) override;
  int32_t send_isCreatePossible(const std::map<std::string, SensorMetadata> & sensorMetadataCollection);
  int32_t recv_isCreatePossible(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
