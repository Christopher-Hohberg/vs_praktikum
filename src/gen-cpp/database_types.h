/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef database_TYPES_H
#define database_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class SensorData;

class SensorMetadata;

typedef struct _SensorData__isset {
  _SensorData__isset() : temperature(false), brightness(false), humidity(false) {}
  bool temperature :1;
  bool brightness :1;
  bool humidity :1;
} _SensorData__isset;

class SensorData : public virtual ::apache::thrift::TBase {
 public:

  SensorData(const SensorData&) noexcept;
  SensorData& operator=(const SensorData&) noexcept;
  SensorData() noexcept
             : temperature(0),
               brightness(0),
               humidity(0) {
  }

  virtual ~SensorData() noexcept;
  double temperature;
  double brightness;
  double humidity;

  _SensorData__isset __isset;

  void __set_temperature(const double val);

  void __set_brightness(const double val);

  void __set_humidity(const double val);

  bool operator == (const SensorData & rhs) const
  {
    if (!(temperature == rhs.temperature))
      return false;
    if (!(brightness == rhs.brightness))
      return false;
    if (!(humidity == rhs.humidity))
      return false;
    return true;
  }
  bool operator != (const SensorData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SensorData & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SensorData &a, SensorData &b);

std::ostream& operator<<(std::ostream& out, const SensorData& obj);

typedef struct _SensorMetadata__isset {
  _SensorMetadata__isset() : port(false), ip(false), timestamp(false), sensorData(false) {}
  bool port :1;
  bool ip :1;
  bool timestamp :1;
  bool sensorData :1;
} _SensorMetadata__isset;

class SensorMetadata : public virtual ::apache::thrift::TBase {
 public:

  SensorMetadata(const SensorMetadata&);
  SensorMetadata& operator=(const SensorMetadata&);
  SensorMetadata() noexcept
                 : port(0),
                   ip(),
                   timestamp(0) {
  }

  virtual ~SensorMetadata() noexcept;
  int32_t port;
  std::string ip;
  int64_t timestamp;
  SensorData sensorData;

  _SensorMetadata__isset __isset;

  void __set_port(const int32_t val);

  void __set_ip(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_sensorData(const SensorData& val);

  bool operator == (const SensorMetadata & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(sensorData == rhs.sensorData))
      return false;
    return true;
  }
  bool operator != (const SensorMetadata &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SensorMetadata & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SensorMetadata &a, SensorMetadata &b);

std::ostream& operator<<(std::ostream& out, const SensorMetadata& obj);



#endif
